fill = "Rating") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_viridis_d()  # You can choose any other color scale if preferred
categorize_ratings <- function(rating) {
if (rating >= 4.5) {
return("Excellent")
} else if (rating >= 4) {
return("Good")
} else if (rating >= 3.5) {
return("Average")
} else if (rating >= 3) {
return("Below Average")
} else {
return("Poor")
}
}
# Get the brand info
brand_info <- sales %>%
group_by(Brands) %>%
summarize(
avg_sales_price = mean(`Selling Price`, na.rm = TRUE),
mean_rating = mean(Rating, na.rm = TRUE)
) %>%
arrange(desc(mean_rating))  # Sort by mean_rating in descending order
# Categorize ratings
brand_info$rating_category <- sapply(brand_info$mean_rating, categorize_ratings)
# Count the number of brands in each rating category
brand_counts <- brand_info %>%
group_by(rating_category) %>%
summarize(count = n())
# Plotting the vertical stacked bar graph
ggplot(brand_info, aes(x = Brands, fill = rating_category)) +
geom_bar() +
scale_fill_manual(values = c("Excellent" = "green", "Good" = "yellow", "Average" = "orange", "Below Average" = "red", "Poor" = "maroon")) +
labs(title = "Distribution of Ratings by Brand",
x = "Brands",
y = "Count",
fill = "Rating Category") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
categorize_ratings <- function(rating) {
ifelse(is.na(rating), "NA", cut(rating, breaks = seq(0, 5.1, by = 0.5), include.lowest = TRUE))
}
# Get the brand info
brand_info <- sales %>%
mutate(rating_group = categorize_ratings(Rating)) %>%
group_by(Brands, rating_group) %>%
summarize(count = n()) %>%
ungroup() %>%
mutate(rating_group = factor(rating_group, levels = levels(factor(brand_info$rating_group))))
# Plotting the vertical stacked bar graph
ggplot(brand_info, aes(x = Brands, y = count, fill = rating_group)) +
geom_bar(stat = "identity") +
scale_fill_viridis_d(name = "Rating Range", labels = c("0-0.5", "0.5-1", "1-1.5", "1.5-2", "2-2.5", "2.5-3", "3-3.5", "3.5-4", "4-4.5", "4.5-5")) +
labs(title = "Distribution of Ratings by Brand",
x = "Brands",
y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
categorize_ratings <- function(rating) {
ifelse(is.na(rating), "NA", cut(rating, breaks = seq(0, 5.1, by = 0.5), include.lowest = TRUE))
}
# Get the brand info
brand_info <- sales %>%
mutate(rating_group = categorize_ratings(Rating)) %>%
group_by(Brands, rating_group) %>%
summarize(count = n()) %>%
ungroup() %>%
mutate(rating_group = factor(rating_group, levels = levels(factor(brand_info$rating_group))))
# Check for any empty groups
empty_groups <- brand_info %>%
group_by(rating_group) %>%
summarize(total_count = sum(count)) %>%
filter(total_count == 0)
print(empty_groups)
# Plotting the vertical stacked bar graph
ggplot(brand_info, aes(x = Brands, y = count, fill = rating_group)) +
geom_bar(stat = "identity") +
scale_fill_viridis_d(name = "Rating Range", labels = c("0-0.5", "0.5-1", "1-1.5", "1.5-2", "2-2.5", "2.5-3", "3-3.5", "3.5-4", "4-4.5", "4.5-5")) +
labs(title = "Distribution of Ratings by Brand",
x = "Brands",
y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Function to categorize ratings into groups
categorize_ratings <- function(rating) {
cut(rating, breaks = seq(0, 5, by = 0.5), labels = c("0-0.5", "0.6-1", "1.1-1.5", "1.6-2", "2.1-2.5", "2.6-3", "3.1-3.5", "3.6-4", "4.1-4.5", "4.6-5"), include.lowest = TRUE)
}
# Get the brand info
brand_info <- sales %>%
mutate(rating_group = categorize_ratings(Rating)) %>%
group_by(Brands, rating_group) %>%
summarize(count = n()) %>%
ungroup() %>%
mutate(rating_group = factor(rating_group, levels = c("0-0.5", "0.6-1", "1.1-1.5", "1.6-2", "2.1-2.5", "2.6-3", "3.1-3.5", "3.6-4", "4.1-4.5", "4.6-5")))
# Plotting the vertical stacked bar graph
ggplot(brand_info, aes(x = Brands, y = count, fill = rating_group)) +
geom_bar(stat = "identity") +
scale_fill_viridis_d(name = "Rating Range") +
labs(title = "Distribution of Ratings by Brand",
x = "Brands",
y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
brand_info_filtered <- brand_info[!is.nan(brand_info$mean_rating), ]
get_brand_info <- function() {
brand_info <- sales |>
group_by(Brands) |>
summarize(
Brand = unique(Brands),  # Keep the brand name intact
avg_sales_price = mean(`Selling Price`, na.rm = TRUE),
mean_rating = mean(Rating, na.rm = TRUE)
) |>
arrange(desc(mean_rating))  # Sort by mean_rating in descending order
return(brand_info)
}
brand_info <- get_brand_info()
brand_info_filtered <- brand_info[!is.nan(brand_info$mean_rating), ]
ggplot(
data = brand_info,
mapping = aes(x = Brand, y = mean_rating)
) +
geom_point(mapping = aes(color = Brands)) +
geom_smooth(method = "lm")
brand_info_filtered <- brand_info[!is.nan(brand_info$mean_rating), ]
ggplot(
data = brand_info,
mapping = aes(x = Brand, y = mean_rating)
) +
geom_point(mapping = aes(color = Brands)) +
geom_smooth()
brand_info_filtered <- brand_info[!is.nan(brand_info$mean_rating), ]
ggplot(
data = brand_info,
mapping = aes(x = Brand, y = mean_rating)
) +
geom_point(mapping = aes(color = Brands)) +
geom_smooth(orientation = "y")
brand_info_filtered <- brand_info[!is.nan(brand_info$mean_rating), ]
ggplot(
data = brand_info,
mapping = aes(x = Brand, y = mean_rating)
) +
geom_point(mapping = aes(color = Brands)) +
geom_smooth(method = "lm", se = FALSE)
brand_info_filtered <- brand_info[!is.nan(brand_info$mean_rating), ]
ggplot(
data = brand_info,
mapping = aes(x = Brand, y = mean_rating)
) +
geom_point(mapping = aes(color = Brands)) +
geom_smooth(se = FALSE, method = "lm")
brand_info_filtered <- brand_info[!is.nan(brand_info$mean_rating), ]
ggplot(
data = brand_info,
mapping = aes(x = Brand, y = mean_rating)
) +
geom_point(mapping = aes(color = Brands)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
brand_info_filtered <- brand_info[!is.nan(brand_info$mean_rating), ]
brand_info$Brand <- factor(brand_info$Brand, levels = brand_info_filtered$Brand[order(brand_info_filtered$mean_rating)])
ggplot(
data = brand_info,
mapping = aes(x = Brand, y = mean_rating)
) +
geom_point(mapping = aes(color = Brands)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(brand_info, aes(x = Brand, y = mean_rating)) +
geom_bar(stat = "identity", fill = "blue", alpha = 0.7) +
geom_point(aes(y = avg_sales_price/10), color = "red") + # dividing avg_sales_price by 10 for better visualization
scale_y_continuous(sec.axis = sec_axis(~.*10, name = "Average Selling Price")) +
labs(x = "Brand", y = "Average Rating", title = "Average Rating vs. Average Selling Price by Brand") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(brand_info, aes(x = Brand)) +
geom_bar(aes(y = mean_rating), stat = "identity", fill = "blue", alpha = 0.7) +
geom_point(aes(y = avg_sales_price), color = "red", size = 3) +
scale_y_continuous(name = "Average Rating",
sec.axis = sec_axis(~., name = "Average Selling Price")) +
labs(x = "Brand", title = "Average Rating vs. Average Selling Price by Brand") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(brand_info, aes(x = Brand)) +
geom_bar(aes(y = mean_rating), stat = "identity", fill = "blue", alpha = 0.7) +
geom_point(aes(y = avg_sales_price), color = "red", size = 3) +
scale_y_continuous(name = "Average Rating",
sec.axis = sec_axis(~ . * 200, name = "Average Selling Price")) + # Adjust the scaling factor
labs(x = "Brand", title = "Average Rating vs. Average Selling Price by Brand") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(brand_info, aes(x = Brand)) +
geom_bar(aes(y = mean_rating), stat = "identity", fill = "blue", alpha = 0.7) +
geom_point(aes(y = avg_sales_price), color = "red", size = 3) +
scale_y_continuous(name = "Average Rating",
sec.axis = sec_axis(~., name = "Average Selling Price")) + # Adjust the scaling factor
labs(x = "Brand", title = "Average Rating vs. Average Selling Price by Brand") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(brand_info, aes(x = Brand)) +
geom_bar(aes(y = mean_rating), stat = "identity", fill = "blue", alpha = 0.7) +
geom_point(aes(y = avg_sales_price), color = "red", size = 3) +
scale_y_continuous(name = "Average Rating",
limits = c(0, 5), # Set limits for primary y-axis
sec.axis = sec_axis(~., name = "Average Selling Price")) + # Adjust the scaling factor
labs(x = "Brand", title = "Average Rating vs. Average Selling Price by Brand") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(brand_info, aes(x = Brand)) +
geom_bar(aes(y = mean_rating), stat = "identity", fill = "blue", alpha = 0.7) +
geom_point(aes(y = avg_sales_price), color = "red", size = 3) +
scale_y_continuous(name = "Average Rating",
limits = c(0, 5), # Set limits for primary y-axis
breaks = seq(0, 5, by = 1), # Set breaks for primary y-axis
sec.axis = sec_axis(~., name = "Average Selling Price")) + # Adjust the scaling factor
labs(x = "Brand", title = "Average Rating vs. Average Selling Price by Brand") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(brand_info, aes(x = Brand)) +
geom_bar(aes(y = mean_rating), stat = "identity", fill = "blue", alpha = 0.7) +
geom_point(aes(y = avg_sales_price), color = "red", size = 3) +
scale_y_continuous(name = "Average Rating",
limits = c(0, 5), # Set limits for primary y-axis
breaks = seq(0, 5, by = 1), # Set breaks for primary y-axis
sec.axis = sec_axis(~., name = "Average Selling Price",
breaks = pretty(range(brand_info$avg_sales_price), n = 5))) + # Adjust the breaks for secondary y-axis
labs(x = "Brand", title = "Average Rating vs. Average Selling Price by Brand") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
get_brand_info <- function() {
brand_info <- sales |>
group_by(Brands) |>
summarize(
Brand = unique(Brands),  # Keep the brand name intact
mean_sales_price = mean(`Selling Price`, na.rm = TRUE),
mean_rating = mean(Rating, na.rm = TRUE)
) |>
arrange(desc(mean_rating))  # Sort by mean_rating in descending order
return(brand_info)
}
brand_info <- get_brand_info()
view(brand_info)
get_brand_info_ratings <- function() {
brand_info <- sales |>
group_by(Brands) |>
summarize(
Brand = unique(Brands),  # Keep the brand name intact
mean_sales_price = mean(`Selling Price`, na.rm = TRUE),
mean_rating = mean(Rating, na.rm = TRUE)
) |>
arrange(desc(mean_rating))  # Sort by mean_rating in descending order
return(brand_info)
}
brand_info <- get_brand_info_ratings()
view(brand_info)
get_brand_info_ratings <- function() {
brand_info <- sales |>
group_by(Brands) |>
summarize(
# Brand = unique(Brands),  # Keep the brand name intact
mean_sales_price = mean(`Selling Price`, na.rm = TRUE),
mean_rating = mean(Rating, na.rm = TRUE)
) |>
arrange(desc(mean_rating))  # Sort by mean_rating in descending order
return(brand_info)
}
brand_info <- get_brand_info_ratings()
view(brand_info)
get_brand_info_sales_price <- function() {
brand_info <- sales |>
group_by(Brands) |>
summarize(
mean_sales_price = mean(`Selling Price`, na.rm = TRUE),
mean_rating = mean(Rating, na.rm = TRUE)
) |>
arrange(desc(mean_sales_price))  # Sort by mean_rating in descending order
return(brand_info)
}
brand_info <- get_brand_info_sales_price()
view(brand_info)
get_brand_info_sales_price <- function() {
brand_info <- sales |>
group_by(Brands) |>
summarize(
mean_sales_price = mean(`Selling Price`, na.rm = TRUE),
mean_rating = mean(Rating, na.rm = TRUE)
) |>
arrange(desc(mean_sales_price))  # Sort by mean_rating in descending order
return(brand_info)
}
brand_info <- get_brand_info_sales_price()
view(brand_info)
brand_info_filtered <- brand_info[!is.nan(brand_info$mean_sales_price), ]
brand_info$Brand <- factor(brand_info$Brand, levels = brand_info_filtered$Brand[order(brand_info_filtered$mean_sales_price)])
get_brand_info_sales_price <- function() {
brand_info_sales <- sales |>
group_by(Brands) |>
summarize(
mean_sales_price = mean(`Selling Price`, na.rm = TRUE),
mean_rating = mean(Rating, na.rm = TRUE)
) |>
arrange(desc(mean_sales_price))  # Sort by mean_rating in descending order
return(brand_info_sales)
}
brand_info_sales <- get_brand_info_sales_price()
view(brand_info_sales)
brand_info_sales <- get_brand_info_sales_price()
view(brand_info_sales)
brand_info_sales_filtered <- brand_info_sales[!is.nan(brand_info_sales$mean_sales_price), ]
brand_info_sales$Brand <- factor(brand_info_sales$Brand, levels = brand_info_sales_filtered$Brand[order(brand_info_sales_filtered$mean_sales_price)])
brand_info_sales_filtered <- brand_info_sales[!is.nan(brand_info_sales$mean_sales_price), ]
brand_info_sales$Brand <- factor(brand_info_sales$Brand, levels = brand_info_sales_filtered$Brand[order(brand_info_sales_filtered$mean_sales_price)])
get_brand_info_sales_price <- function() {
brand_info_sales <- sales |>
group_by(Brands) |>
summarize(
mean_sales_price = mean(`Selling Price`, na.rm = TRUE),
mean_rating = mean(Rating, na.rm = TRUE)
) |>
arrange(desc(mean_sales_price))  # Sort by mean_rating in descending order
return(brand_info_sales)
}
brand_info_sales <- get_brand_info_sales_price()
view(brand_info_sales)
brand_info_sales_filtered <- brand_info_sales[!is.nan(brand_info_sales$mean_sales_price), ]
brand_info_sales$Brands <- factor(brand_info_sales$Brands, levels = brand_info_sales_filtered$Brand[order(brand_info_sales_filtered$mean_sales_price)])
brand_info_sales$Brands <- factor(brand_info_sales$Brands, levels = brand_info_sales_filtered$Brands[order(brand_info_sales_filtered$mean_sales_price)])
ggplot(
data = brand_info_sales,
mapping = aes(x = Brand, y = mean_sales_price)
) +
geom_point(mapping = aes(color = Brands)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(
data = brand_info_sales,
mapping = aes(x = Brands, y = mean_sales_price)
) +
geom_point(mapping = aes(color = Brands)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
brand_info_filtered <- brand_info[!is.nan(brand_info$mean_rating), ]
brand_info$Brands <- factor(brand_info$Brands, levels = brand_info_filtered$Brand[order(brand_info_filtered$mean_rating)])
ggplot(
data = brand_info,
mapping = aes(x = Brands, y = mean_rating)
) +
geom_point(mapping = aes(color = Brands)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
brand_info_filtered <- brand_info[!is.nan(brand_info$mean_rating), ]
brand_info$Brands <- factor(brand_info$Brands, levels = brand_info_filtered$Brand[order(brand_info_filtered$mean_rating)])
ggplot(
data = brand_info,
mapping = aes(x = Brands, y = mean_rating)
) +
geom_point(mapping = aes(color = Brands)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
brand_info_filtered <- brand_info[!is.nan(brand_info$mean_rating), ]
brand_info$Brands <- factor(brand_info$Brands, levels = brand_info_filtered$Brands[order(brand_info_filtered$mean_rating)])
ggplot(
data = brand_info,
mapping = aes(x = Brands, y = mean_rating)
) +
geom_point(mapping = aes(color = Brands)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
brand_info_filtered <- brand_info[!is.na(brand_info$mean_rating) & !is.nan(brand_info$mean_rating), ]
# Convert Brands to factor with desired order based on mean_rating
brand_info$Brands <- factor(brand_info$Brands, levels = brand_info_filtered$Brands[order(brand_info_filtered$mean_rating)])
# Plotting
ggplot(
data = brand_info,
mapping = aes(x = Brands, y = mean_rating, color = Brands)  # map Brands to color
) +
geom_point() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
get_brand_info_ratings <- function() {
brand_info <- sales |>
group_by(Brands) |>
summarize(
mean_sales_price = mean(`Selling Price`, na.rm = TRUE),
mean_rating = mean(Rating, na.rm = TRUE)
) |>
arrange(desc(mean_rating))  # Sort by mean_rating in descending order
return(brand_info)
}
brand_info <- get_brand_info_ratings()
view(brand_info)
brand_info_filtered <- brand_info[!is.nan(brand_info$mean_rating), ]
brand_info$Brand <- factor(brand_info$Brand, levels = brand_info_filtered$Brand[order(brand_info_filtered$mean_rating)])
source("C:/Users/krist/OneDrive/Data Analyst class work/Capstone 1/capstone 1.R", echo=TRUE)
brand_info_filtered <- brand_info[!is.nan(brand_info$mean_rating), ]
brand_info$Brand <- factor(brand_info$Brand, levels = brand_info_filtered$Brand[order(brand_info_filtered$mean_rating)])
ggplot(
data = brand_info,
mapping = aes(x = Brand, y = mean_rating)
) +
geom_point(mapping = aes(color = Brands)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
brand_info_rating_filtered <- brand_info[!is.nan(brand_info$mean_rating), ]
brand_info$Brand <- factor(brand_info$Brand, levels = brand_info_rating_filtered$Brand[order(brand_info_rating_filtered$mean_rating)])
ggplot(
data = brand_info,
mapping = aes(x = Brand, y = mean_rating)
) +
geom_point(mapping = aes(color = Brands)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
brand_info_sale_price_filtered <- brand_info[!is.nan(brand_info$avg_sales_price), ]
brand_info$Brand <- factor(brand_info$Brand, levels = brand_info_sale_price_filtered$Brand[order(brand_info_sale_price_filtered$avg_sales_price)])
ggplot(
data = brand_info,
mapping = aes(x = Brand, y = avg_sales_price)
) +
geom_point(mapping = aes(color = Brands)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Filter out NA values for mean_rating and avg_sales_price
brand_info_rating_filtered <- brand_info[!is.nan(brand_info$mean_rating), ]
brand_info_sale_price_filtered <- brand_info[!is.nan(brand_info$avg_sales_price), ]
# Set factor levels for Brands based on mean_rating and avg_sales_price
brand_info$Brand <- factor(brand_info$Brand, levels = brand_info_rating_filtered$Brand[order(brand_info_rating_filtered$mean_rating)])
# Create the scatter plot for ratings
plot_ratings <- ggplot(
data = brand_info,
mapping = aes(x = Brand, y = mean_rating)
) +
geom_point(mapping = aes(color = Brands)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Set factor levels for Brands based on avg_sales_price
brand_info$Brand <- factor(brand_info$Brand, levels = brand_info_sale_price_filtered$Brand[order(brand_info_sale_price_filtered$avg_sales_price)])
# Create the scatter plot for selling prices
plot_sales <- ggplot(
data = brand_info,
mapping = aes(x = Brand, y = avg_sales_price)
) +
geom_point(mapping = aes(color = Brands)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Overlay the two plots
plot_combined <- plot_ratings + plot_sales
brand_info_rating_filtered <- brand_info[!is.nan(brand_info$mean_rating), ]
brand_info_sale_price_filtered <- brand_info[!is.nan(brand_info$avg_sales_price), ]
# Set factor levels for Brands based on mean_rating and avg_sales_price
brand_info$Brand <- factor(brand_info$Brand, levels = brand_info_rating_filtered$Brand[order(brand_info_rating_filtered$mean_rating)])
brand_info$Brand <- factor(brand_info$Brand, levels = brand_info_sale_price_filtered$Brand[order(brand_info_sale_price_filtered$avg_sales_price)])
# Create the scatter plot for ratings
plot_ratings <- ggplot(
data = brand_info,
mapping = aes(x = Brand, y = mean_rating)
) +
geom_point(mapping = aes(color = Brands)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create the scatter plot for selling prices
plot_sales <- ggplot(
data = brand_info,
mapping = aes(x = Brand, y = avg_sales_price)
) +
geom_point(mapping = aes(color = Brands)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Overlay the two plots
plot_combined <- plot_ratings + plot_sales
# Filter out NA values for mean_rating and avg_sales_price
brand_info_rating_filtered <- brand_info[!is.nan(brand_info$mean_rating), ]
brand_info_sale_price_filtered <- brand_info[!is.nan(brand_info$avg_sales_price), ]
# Set factor levels for Brands based on mean_rating and avg_sales_price
brand_info$Brand <- factor(brand_info$Brand, levels = brand_info_rating_filtered$Brand[order(brand_info_rating_filtered$mean_rating)])
brand_info$Brand <- factor(brand_info$Brand, levels = brand_info_sale_price_filtered$Brand[order(brand_info_sale_price_filtered$avg_sales_price)])
# Create a single ggplot object with both scatter plots overlaid
plot_combined <- ggplot(brand_info) +
geom_point(aes(x = Brand, y = mean_rating, color = Brands)) +
geom_point(aes(x = Brand, y = avg_sales_price, color = Brands)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Display the combined plot
print(plot_combined)
brand_info |>
ggplot(aes(x = avg_sales_price, y = mean_rating, color = Brands)) +
geom_point(size=2) +
geom_smooth(se=F, color="grey")
brand_info |>
ggplot(aes(x = avg_sales_price, y = mean_rating, color = Brands)) +
geom_point(size=2) +
geom_smooth(se=F, color="black")
brand_info |>
ggplot(aes(x = avg_sales_price, y = mean_rating, color = Brands)) +
geom_point(size=2) +
geom_smooth(se=F, color="black") +
facet_wrap("am")
# Summarize all data for easy viewing
summary(sales)
# second test
brand_info |>
ggplot(aes(x = avg_sales_price, y = mean_rating, color = Brands)) +
geom_point(size=2) +
geom_smooth(se=F, color="black") +
facet_wrap("Models")
brand_info |>
ggplot(aes(x = avg_sales_price, y = mean_rating, color = Brands)) +
geom_point(size=2) +
geom_smooth(se=F, color="black") +
facet_wrap("avg_sales_price")
library(nlme, lib.loc = "C:/Program Files/R/R-4.3.2/library")
# different chart
brand_info |>
ggplot(aes(x = avg_sales_price, y = mean_rating, color = Brands)) +
geom_point(size=2) +
# geom_smooth(se=F, color="black") +
facet_grid(rows = vars(Brands))
# different chart
brand_info |>
ggplot(aes(x = avg_sales_price, y = mean_rating, color = Brands)) +
geom_point(size=2) +
# geom_smooth(se=F, color="black") +
# facet_grid(rows = vars(Brands))  This was ugly.  trying cols instead
facet_grid(cols = vars(Brands))
# different chart
brand_info |>
ggplot(aes(x = avg_sales_price, y = mean_rating, color = Brands)) +
geom_point(size=2) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
# geom_smooth(se=F, color="black") +
# facet_grid(rows = vars(Brands))  This was ugly.  trying cols instead
facet_grid(cols = vars(Brands))
# different chart
brand_info |>
ggplot(aes(x = avg_sales_price, y = mean_rating, color = Brands)) +
geom_point(size=2) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
# geom_smooth(se=F, color="black") +
facet_grid(rows = vars(Brands))  #This was ugly.  trying cols instead
